/*
 * DialogPrepareRound.java
 * Provides GUI for starting a round. 
 * 
 */
package swimmingcompetition.ux;

import javax.swing.DefaultListModel;

import swimmingcompetition.simulator.Stroke;
import swimmingcompetition.ux.viewmodels.ModelPrepareRound;
import swimmingcompetition.ux.viewmodels.UIUpdater;

/**
 *
 * @author Wickramaranga
 */
public class DialogPrepareRound extends javax.swing.JDialog {

    private final ModelPrepareRound roundModel;
    private boolean okay;

    /**
     * Creates new form DialogPrepareRound
     *
     * @param parent parent of this frame.
     * @param modal whether this frame is a modal.
     * @param model the underlying viewmodel/controller for the dialog.
     */
    public DialogPrepareRound(java.awt.Frame parent, boolean modal, ModelPrepareRound model) {
        super(parent, modal);
        this.roundModel = model;
        okay = false;
        initComponents();

        jListAvailableSwimmers.setModel(new DefaultListModel());
        jListSelectedSwimmers.setModel(new DefaultListModel());
        jLabelCount.setText(String.valueOf(roundModel.getMaxSwimmers()));
        this.roundModel.setUpdater(new UIUpdater() {
            @Override
            public void updateUI(String partToUpdate) {
                switch (partToUpdate) {
                    case "lists":
                        DefaultListModel<String> listModel1
                                = ((DefaultListModel<String>) jListAvailableSwimmers.getModel());
                        listModel1.clear();
                        for (int i = 0;
                             i < roundModel.getAvailableSwimmerCount(); i++) {
                            listModel1.addElement(roundModel.getAvailableSwimmer(i));
                        }

                        DefaultListModel<String> listModel2
                                = ((DefaultListModel<String>) jListSelectedSwimmers.getModel());
                        listModel2.clear();
                        for (int i = 0;
                             i < roundModel.getSelectedSwimmerCount(); i++) {
                            listModel2.addElement(roundModel.getSelectedSwimmer(i));
                        }
                        break;
                    case "gender":
                        if (roundModel.getGender() != null) {
                            jLabelGender.setText(roundModel.getGender().toString().toLowerCase());
                        }else{
                       jLabelGender.setText("Not Selected");
                        }
                        break;
                    case "message":
                        jLabelMsg.setText(roundModel.getMessage());
                        break;
                    default:
                        assert false;
                        break;
                }
            }
        });
        jButtonOkay.setEnabled(model.isValid());

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonOkay = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jPanelSwimmers = new javax.swing.JPanel();
        jLabelSwimmerSelection = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListAvailableSwimmers = new javax.swing.JList();
        jLabelAvailableSwimmers = new javax.swing.JLabel();
        jLabelSelectedSwimmers = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListSelectedSwimmers = new javax.swing.JList();
        jButtonAdd = new javax.swing.JButton();
        jButtonRemove = new javax.swing.JButton();
        jLabelGenderDesc = new javax.swing.JLabel();
        jLabelGender = new javax.swing.JLabel();
        jLabelCountDesc = new javax.swing.JLabel();
        jLabelCount = new javax.swing.JLabel();
        jPanelStroke = new javax.swing.JPanel();
        jLabelStroke = new javax.swing.JLabel();
        jComboStroke = new javax.swing.JComboBox();
        jLabelMsg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Prepare round");
        setModal(true);
        setResizable(false);
        setType(java.awt.Window.Type.POPUP);

        jButtonOkay.setBackground(new java.awt.Color(0, 204, 204));
        jButtonOkay.setText("Okay");
        jButtonOkay.setEnabled(false);
        jButtonOkay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkayActionPerformed(evt);
            }
        });

        jButtonCancel.setBackground(new java.awt.Color(0, 204, 204));
        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jLabelSwimmerSelection.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabelSwimmerSelection.setText("Swimmer Selection");

        jScrollPane1.setViewportView(jListAvailableSwimmers);

        jLabelAvailableSwimmers.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelAvailableSwimmers.setText("Available Swimmers");

        jLabelSelectedSwimmers.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelSelectedSwimmers.setText("Selected Swimmers");

        jScrollPane2.setViewportView(jListSelectedSwimmers);

        jButtonAdd.setBackground(new java.awt.Color(0, 204, 204));
        jButtonAdd.setText(">");
        jButtonAdd.setToolTipText("Add");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonRemove.setBackground(new java.awt.Color(0, 204, 204));
        jButtonRemove.setText("<");
        jButtonRemove.setToolTipText("Remove");
        jButtonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveActionPerformed(evt);
            }
        });

        jLabelGenderDesc.setText("Gender for the Round");

        jLabelGender.setText("Not Selected");

        jLabelCountDesc.setText("Maximum Swimmer Count");

        jLabelCount.setText("0");

        javax.swing.GroupLayout jPanelSwimmersLayout = new javax.swing.GroupLayout(jPanelSwimmers);
        jPanelSwimmers.setLayout(jPanelSwimmersLayout);
        jPanelSwimmersLayout.setHorizontalGroup(
            jPanelSwimmersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSwimmersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSwimmersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelSwimmersLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelSwimmersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonRemove, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                            .addComponent(jButtonAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabelAvailableSwimmers)
                    .addComponent(jLabelSwimmerSelection)
                    .addComponent(jLabelGenderDesc)
                    .addComponent(jLabelCountDesc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelSwimmersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelSwimmersLayout.createSequentialGroup()
                        .addGroup(jPanelSwimmersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelGender)
                            .addComponent(jLabelSelectedSwimmers))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelSwimmersLayout.createSequentialGroup()
                        .addGroup(jPanelSwimmersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelCount)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 10, Short.MAX_VALUE))))
        );
        jPanelSwimmersLayout.setVerticalGroup(
            jPanelSwimmersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSwimmersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelSwimmerSelection)
                .addGap(18, 18, 18)
                .addGroup(jPanelSwimmersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelAvailableSwimmers)
                    .addComponent(jLabelSelectedSwimmers))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelSwimmersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelSwimmersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelSwimmersLayout.createSequentialGroup()
                        .addComponent(jButtonAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonRemove)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelSwimmersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelGender)
                    .addComponent(jLabelGenderDesc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelSwimmersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCountDesc)
                    .addComponent(jLabelCount))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabelStroke.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabelStroke.setText("Stroke");

        jComboStroke.setBackground(new java.awt.Color(0, 204, 204));
        jComboStroke.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "FreeStyle", "ButterflyStroke", "BreastStroke", "BackStroke" }));
        jComboStroke.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboStrokeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelStrokeLayout = new javax.swing.GroupLayout(jPanelStroke);
        jPanelStroke.setLayout(jPanelStrokeLayout);
        jPanelStrokeLayout.setHorizontalGroup(
            jPanelStrokeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelStrokeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelStroke)
                .addGap(18, 18, 18)
                .addComponent(jComboStroke, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelStrokeLayout.setVerticalGroup(
            jPanelStrokeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelStrokeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelStrokeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboStroke, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelStroke))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabelMsg.setForeground(new java.awt.Color(255, 0, 51));
        jLabelMsg.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabelMsg.setText("Message");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabelMsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonOkay)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanelStroke, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelSwimmers, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelSwimmers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanelStroke, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCancel)
                    .addComponent(jButtonOkay)
                    .addComponent(jLabelMsg))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        roundModel.addSwimmers(jListAvailableSwimmers.getSelectedIndices());
        jButtonOkay.setEnabled(roundModel.isValid());
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveActionPerformed
        roundModel.removeSwimmers(jListSelectedSwimmers.getSelectedIndices());
        jButtonOkay.setEnabled(roundModel.isValid());
    }//GEN-LAST:event_jButtonRemoveActionPerformed

    private void jButtonOkayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkayActionPerformed
        okay = true;
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_jButtonOkayActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jComboStrokeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboStrokeActionPerformed
        roundModel.setStroke(Stroke.valueOf(
                this.jComboStroke.getSelectedItem().toString().toUpperCase()));
    }//GEN-LAST:event_jComboStrokeActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonOkay;
    private javax.swing.JButton jButtonRemove;
    private javax.swing.JComboBox jComboStroke;
    private javax.swing.JLabel jLabelAvailableSwimmers;
    private javax.swing.JLabel jLabelCount;
    private javax.swing.JLabel jLabelCountDesc;
    private javax.swing.JLabel jLabelGender;
    private javax.swing.JLabel jLabelGenderDesc;
    private javax.swing.JLabel jLabelMsg;
    private javax.swing.JLabel jLabelSelectedSwimmers;
    private javax.swing.JLabel jLabelStroke;
    private javax.swing.JLabel jLabelSwimmerSelection;
    private javax.swing.JList jListAvailableSwimmers;
    private javax.swing.JList jListSelectedSwimmers;
    private javax.swing.JPanel jPanelStroke;
    private javax.swing.JPanel jPanelSwimmers;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    /**
     * Whether user has pressed the okay button.
     *
     * @return whether the user has pressed the okay button.
     */
    public boolean isOkay() {
        return okay;
    }
}
